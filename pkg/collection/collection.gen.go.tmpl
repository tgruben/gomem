// Copyright 2019 Nick Poorman
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

{{$package := "collection"}}
{{$objectPackage := "object"}}

package {{$package}}

import (
	"fmt"

	"github.com/apache/arrow/go/v10/arrow/array"
	"github.com/gomem/gomem/pkg/object"
)

{{$kinds := buildKinds .In}}

{{range $kind := $kinds}}
// New{{$kind.Data.Name}}Collection creates a new {{$kind.Data.Name}} collection builder.
func New{{$kind.Data.Name}}Collection(builder *array.{{$kind.Data.Name}}Builder) *{{$kind.Data.Name}}Collection {
	return &{{$kind.Data.Name}}Collection{
		builder: builder,
	}
}

// {{$kind.Data.Name}}Collection has logic to apply to this type.
type {{$kind.Data.Name}}Collection struct {
	builder *array.{{$kind.Data.Name}}Builder
}

func (c *{{$kind.Data.Name}}Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastTo{{$kind.Data.Name}}(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to {{$objectPackage}}.{{$kind.Data.Name}}", v)
	}

	c.builder.Append(b.Value())
	return nil
}
{{- end}}

var (
    {{- range $kind := $kinds}}
	_ Collection = (*{{$kind.Data.Name}}Collection)(nil)
    {{- end}}
)
