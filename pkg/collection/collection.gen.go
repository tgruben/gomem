// Code generated by pkg/collection/collection.gen.go.tmpl. DO NOT EDIT.

// Copyright 2019 Nick Poorman
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package collection

import (
	"fmt"

	"github.com/apache/arrow/go/v10/arrow/array"
	"github.com/gomem/gomem/pkg/object"
)

// NewBooleanCollection creates a new Boolean collection builder.
func NewBooleanCollection(builder *array.BooleanBuilder) *BooleanCollection {
	return &BooleanCollection{
		builder: builder,
	}
}

// BooleanCollection has logic to apply to this type.
type BooleanCollection struct {
	builder *array.BooleanBuilder
}

func (c *BooleanCollection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToBoolean(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Boolean", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewDate32Collection creates a new Date32 collection builder.
func NewDate32Collection(builder *array.Date32Builder) *Date32Collection {
	return &Date32Collection{
		builder: builder,
	}
}

// Date32Collection has logic to apply to this type.
type Date32Collection struct {
	builder *array.Date32Builder
}

func (c *Date32Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToDate32(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Date32", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewDate64Collection creates a new Date64 collection builder.
func NewDate64Collection(builder *array.Date64Builder) *Date64Collection {
	return &Date64Collection{
		builder: builder,
	}
}

// Date64Collection has logic to apply to this type.
type Date64Collection struct {
	builder *array.Date64Builder
}

func (c *Date64Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToDate64(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Date64", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewDayTimeIntervalCollection creates a new DayTimeInterval collection builder.
func NewDayTimeIntervalCollection(builder *array.DayTimeIntervalBuilder) *DayTimeIntervalCollection {
	return &DayTimeIntervalCollection{
		builder: builder,
	}
}

// DayTimeIntervalCollection has logic to apply to this type.
type DayTimeIntervalCollection struct {
	builder *array.DayTimeIntervalBuilder
}

func (c *DayTimeIntervalCollection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToDayTimeInterval(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.DayTimeInterval", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewDecimal128Collection creates a new Decimal128 collection builder.
func NewDecimal128Collection(builder *array.Decimal128Builder) *Decimal128Collection {
	return &Decimal128Collection{
		builder: builder,
	}
}

// Decimal128Collection has logic to apply to this type.
type Decimal128Collection struct {
	builder *array.Decimal128Builder
}

func (c *Decimal128Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToDecimal128(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Decimal128", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewDurationCollection creates a new Duration collection builder.
func NewDurationCollection(builder *array.DurationBuilder) *DurationCollection {
	return &DurationCollection{
		builder: builder,
	}
}

// DurationCollection has logic to apply to this type.
type DurationCollection struct {
	builder *array.DurationBuilder
}

func (c *DurationCollection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToDuration(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Duration", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewFloat16Collection creates a new Float16 collection builder.
func NewFloat16Collection(builder *array.Float16Builder) *Float16Collection {
	return &Float16Collection{
		builder: builder,
	}
}

// Float16Collection has logic to apply to this type.
type Float16Collection struct {
	builder *array.Float16Builder
}

func (c *Float16Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToFloat16(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Float16", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewFloat32Collection creates a new Float32 collection builder.
func NewFloat32Collection(builder *array.Float32Builder) *Float32Collection {
	return &Float32Collection{
		builder: builder,
	}
}

// Float32Collection has logic to apply to this type.
type Float32Collection struct {
	builder *array.Float32Builder
}

func (c *Float32Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToFloat32(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Float32", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewFloat64Collection creates a new Float64 collection builder.
func NewFloat64Collection(builder *array.Float64Builder) *Float64Collection {
	return &Float64Collection{
		builder: builder,
	}
}

// Float64Collection has logic to apply to this type.
type Float64Collection struct {
	builder *array.Float64Builder
}

func (c *Float64Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToFloat64(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Float64", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewInt16Collection creates a new Int16 collection builder.
func NewInt16Collection(builder *array.Int16Builder) *Int16Collection {
	return &Int16Collection{
		builder: builder,
	}
}

// Int16Collection has logic to apply to this type.
type Int16Collection struct {
	builder *array.Int16Builder
}

func (c *Int16Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToInt16(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Int16", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewInt32Collection creates a new Int32 collection builder.
func NewInt32Collection(builder *array.Int32Builder) *Int32Collection {
	return &Int32Collection{
		builder: builder,
	}
}

// Int32Collection has logic to apply to this type.
type Int32Collection struct {
	builder *array.Int32Builder
}

func (c *Int32Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToInt32(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Int32", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewInt64Collection creates a new Int64 collection builder.
func NewInt64Collection(builder *array.Int64Builder) *Int64Collection {
	return &Int64Collection{
		builder: builder,
	}
}

// Int64Collection has logic to apply to this type.
type Int64Collection struct {
	builder *array.Int64Builder
}

func (c *Int64Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToInt64(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Int64", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewInt8Collection creates a new Int8 collection builder.
func NewInt8Collection(builder *array.Int8Builder) *Int8Collection {
	return &Int8Collection{
		builder: builder,
	}
}

// Int8Collection has logic to apply to this type.
type Int8Collection struct {
	builder *array.Int8Builder
}

func (c *Int8Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToInt8(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Int8", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewMonthIntervalCollection creates a new MonthInterval collection builder.
func NewMonthIntervalCollection(builder *array.MonthIntervalBuilder) *MonthIntervalCollection {
	return &MonthIntervalCollection{
		builder: builder,
	}
}

// MonthIntervalCollection has logic to apply to this type.
type MonthIntervalCollection struct {
	builder *array.MonthIntervalBuilder
}

func (c *MonthIntervalCollection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToMonthInterval(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.MonthInterval", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewStringCollection creates a new String collection builder.
func NewStringCollection(builder *array.StringBuilder) *StringCollection {
	return &StringCollection{
		builder: builder,
	}
}

// StringCollection has logic to apply to this type.
type StringCollection struct {
	builder *array.StringBuilder
}

func (c *StringCollection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToString(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.String", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewTime32Collection creates a new Time32 collection builder.
func NewTime32Collection(builder *array.Time32Builder) *Time32Collection {
	return &Time32Collection{
		builder: builder,
	}
}

// Time32Collection has logic to apply to this type.
type Time32Collection struct {
	builder *array.Time32Builder
}

func (c *Time32Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToTime32(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Time32", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewTime64Collection creates a new Time64 collection builder.
func NewTime64Collection(builder *array.Time64Builder) *Time64Collection {
	return &Time64Collection{
		builder: builder,
	}
}

// Time64Collection has logic to apply to this type.
type Time64Collection struct {
	builder *array.Time64Builder
}

func (c *Time64Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToTime64(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Time64", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewTimestampCollection creates a new Timestamp collection builder.
func NewTimestampCollection(builder *array.TimestampBuilder) *TimestampCollection {
	return &TimestampCollection{
		builder: builder,
	}
}

// TimestampCollection has logic to apply to this type.
type TimestampCollection struct {
	builder *array.TimestampBuilder
}

func (c *TimestampCollection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToTimestamp(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Timestamp", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewUint16Collection creates a new Uint16 collection builder.
func NewUint16Collection(builder *array.Uint16Builder) *Uint16Collection {
	return &Uint16Collection{
		builder: builder,
	}
}

// Uint16Collection has logic to apply to this type.
type Uint16Collection struct {
	builder *array.Uint16Builder
}

func (c *Uint16Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToUint16(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Uint16", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewUint32Collection creates a new Uint32 collection builder.
func NewUint32Collection(builder *array.Uint32Builder) *Uint32Collection {
	return &Uint32Collection{
		builder: builder,
	}
}

// Uint32Collection has logic to apply to this type.
type Uint32Collection struct {
	builder *array.Uint32Builder
}

func (c *Uint32Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToUint32(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Uint32", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewUint64Collection creates a new Uint64 collection builder.
func NewUint64Collection(builder *array.Uint64Builder) *Uint64Collection {
	return &Uint64Collection{
		builder: builder,
	}
}

// Uint64Collection has logic to apply to this type.
type Uint64Collection struct {
	builder *array.Uint64Builder
}

func (c *Uint64Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToUint64(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Uint64", v)
	}

	c.builder.Append(b.Value())
	return nil
}

// NewUint8Collection creates a new Uint8 collection builder.
func NewUint8Collection(builder *array.Uint8Builder) *Uint8Collection {
	return &Uint8Collection{
		builder: builder,
	}
}

// Uint8Collection has logic to apply to this type.
type Uint8Collection struct {
	builder *array.Uint8Builder
}

func (c *Uint8Collection) AppendObject(v object.Object) error {
	if v == nil {
		c.builder.AppendNull()
		return nil
	}

	b, chkd := object.CastToUint8(v)
	if !chkd {
		return fmt.Errorf("cannot cast %T to object.Uint8", v)
	}

	c.builder.Append(b.Value())
	return nil
}

var (
	_ Collection = (*BooleanCollection)(nil)
	_ Collection = (*Date32Collection)(nil)
	_ Collection = (*Date64Collection)(nil)
	_ Collection = (*DayTimeIntervalCollection)(nil)
	_ Collection = (*Decimal128Collection)(nil)
	_ Collection = (*DurationCollection)(nil)
	_ Collection = (*Float16Collection)(nil)
	_ Collection = (*Float32Collection)(nil)
	_ Collection = (*Float64Collection)(nil)
	_ Collection = (*Int16Collection)(nil)
	_ Collection = (*Int32Collection)(nil)
	_ Collection = (*Int64Collection)(nil)
	_ Collection = (*Int8Collection)(nil)
	_ Collection = (*MonthIntervalCollection)(nil)
	_ Collection = (*StringCollection)(nil)
	_ Collection = (*Time32Collection)(nil)
	_ Collection = (*Time64Collection)(nil)
	_ Collection = (*TimestampCollection)(nil)
	_ Collection = (*Uint16Collection)(nil)
	_ Collection = (*Uint32Collection)(nil)
	_ Collection = (*Uint64Collection)(nil)
	_ Collection = (*Uint8Collection)(nil)
)
