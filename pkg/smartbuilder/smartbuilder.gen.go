// Code generated by pkg/smartbuilder/smartbuilder.gen.go.tmpl. DO NOT EDIT.

// Copyright 2019 Nick Poorman
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package smartbuilder

import (
	"fmt"
	"reflect"

	"github.com/apache/arrow/go/v10/arrow/array"
	"github.com/gomem/gomem/internal/debug"
	"github.com/gomem/gomem/pkg/object"
)

// TODO(nickpoorman): Add the rest of the logical types.
func (sb *SmartBuilder) appendValue(bldr array.Builder, v interface{}) error {
	debug.Debug(fmt.Sprintf("appendValue: |%v| - %T\n", v, bldr))
	switch b := bldr.(type) {

	case *array.BooleanBuilder:
		vT, ok := object.CastToBoolean(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Boolean", v)
		}
		b.Append(vT.Value())

	case *array.Date32Builder:
		vT, ok := object.CastToDate32(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Date32", v)
		}
		b.Append(vT.Value())

	case *array.Date64Builder:
		vT, ok := object.CastToDate64(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Date64", v)
		}
		b.Append(vT.Value())

	case *array.DayTimeIntervalBuilder:
		vT, ok := object.CastToDayTimeInterval(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.DayTimeInterval", v)
		}
		b.Append(vT.Value())

	case *array.Decimal128Builder:
		vT, ok := object.CastToDecimal128(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Decimal128", v)
		}
		b.Append(vT.Value())

	case *array.DurationBuilder:
		vT, ok := object.CastToDuration(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Duration", v)
		}
		b.Append(vT.Value())

	case *array.Float16Builder:
		vT, ok := object.CastToFloat16(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Float16", v)
		}
		b.Append(vT.Value())

	case *array.Float32Builder:
		vT, ok := object.CastToFloat32(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Float32", v)
		}
		b.Append(vT.Value())

	case *array.Float64Builder:
		vT, ok := object.CastToFloat64(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Float64", v)
		}
		b.Append(vT.Value())

	case *array.Int16Builder:
		vT, ok := object.CastToInt16(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Int16", v)
		}
		b.Append(vT.Value())

	case *array.Int32Builder:
		vT, ok := object.CastToInt32(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Int32", v)
		}
		b.Append(vT.Value())

	case *array.Int64Builder:
		vT, ok := object.CastToInt64(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Int64", v)
		}
		b.Append(vT.Value())

	case *array.Int8Builder:
		vT, ok := object.CastToInt8(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Int8", v)
		}
		b.Append(vT.Value())

	case *array.MonthIntervalBuilder:
		vT, ok := object.CastToMonthInterval(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.MonthInterval", v)
		}
		b.Append(vT.Value())

	case *array.StringBuilder:
		vT, ok := object.CastToString(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.String", v)
		}
		b.Append(vT.Value())

	case *array.Time32Builder:
		vT, ok := object.CastToTime32(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Time32", v)
		}
		b.Append(vT.Value())

	case *array.Time64Builder:
		vT, ok := object.CastToTime64(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Time64", v)
		}
		b.Append(vT.Value())

	case *array.TimestampBuilder:
		vT, ok := object.CastToTimestamp(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Timestamp", v)
		}
		b.Append(vT.Value())

	case *array.Uint16Builder:
		vT, ok := object.CastToUint16(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Uint16", v)
		}
		b.Append(vT.Value())

	case *array.Uint32Builder:
		vT, ok := object.CastToUint32(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Uint32", v)
		}
		b.Append(vT.Value())

	case *array.Uint64Builder:
		vT, ok := object.CastToUint64(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Uint64", v)
		}
		b.Append(vT.Value())

	case *array.Uint8Builder:
		vT, ok := object.CastToUint8(v)
		if !ok {
			return fmt.Errorf("cannot cast %T to object.Uint8", v)
		}
		b.Append(vT.Value())

	case *array.ListBuilder:
		b.Append(true)
		sub := b.ValueBuilder()
		v := reflect.ValueOf(v)
		for i := 0; i < v.Len(); i++ {
			sb.appendValue(sub, v.Index(i).Interface())
		}

	case *array.FixedSizeListBuilder:
		b.Append(true)
		sub := b.ValueBuilder()
		v := reflect.ValueOf(v)
		for i := 0; i < v.Len(); i++ {
			sb.appendValue(sub, v.Index(i).Interface())
		}

	case *array.StructBuilder:
		b.Append(true)
		v := reflect.ValueOf(v)
		for i := 0; i < b.NumField(); i++ {
			f := b.FieldBuilder(i)
			sb.appendValue(f, v.Field(i).Interface())
		}

	default:
		return fmt.Errorf("builder/smartbuilder: unhandled Arrow builder type %T", b)
	}

	return nil
}
