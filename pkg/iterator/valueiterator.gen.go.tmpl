// Copyright 2019 Nick Poorman
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package iterator

import (
	"fmt"
	"sync/atomic"

	"github.com/apache/arrow/go/v10/arrow"
	"github.com/apache/arrow/go/v10/arrow/array"
	"github.com/apache/arrow/go/v10/arrow/decimal128"
	"github.com/apache/arrow/go/v10/arrow/float16"
	"github.com/gomem/gomem/internal/debug"
)

// ValueIterator is a generic iterator for scanning over values.
type ValueIterator interface {
	// ValueInterface returns the current value as an interface{}.
	ValueInterface() interface{}

	// ValueAsJSON returns the current value as an interface{} in it's JSON representation.
	ValueAsJSON() (interface{}, error)

	// DataType returns the DataType for the Column being iterated over.
	DataType() arrow.DataType

	// Next moves the iterator to the next value. This will return false when there are no more values.
	Next() bool

	// Retain keeps a reference to the ValueIterator.
	Retain()

	// Release removes a reference to the ValueIterator.
	Release()
}

// NewValueIterator creates a new generic ValueIterator.
func NewValueIterator(column *arrow.Column) ValueIterator {
	field := column.Field()
	switch field.Type.(type) {
	{{range .In}}
	case *arrow.{{.Name}}Type:
		return New{{.Name}}ValueIterator(column)
	{{end}}

	case *arrow.ListType:
		return NewListValueIterator(column)

	case *arrow.StructType:
		return NewStructValueIterator(column)

	default:
		panic(fmt.Errorf("dataframe/valueiterator: unhandled field type %T", field.Type))
	}
}

func NewInterfaceValueIterator(field arrow.Field, iface arrow.Array) ValueIterator {
	chunk := arrow.NewChunked(iface.DataType(), []arrow.Array{iface})
	defer chunk.Release()

	col := arrow.NewColumn(field, chunk)
	defer col.Release()

	return NewValueIterator(col)
}

{{range .In}}
{{if not (contains .ExcludeGenerate "valueiterator") }}
// {{.Name}}ValueIterator is an iterator for reading an Arrow Column value by value.
type {{.Name}}ValueIterator struct {
	refCount    int64
	chunkIterator *{{.Name}}ChunkIterator

	// Things we need to maintain for the iterator
	index  int          // current value index
	values []{{.Type}}      // current chunk values
	ref    *array.{{.Name}} // the chunk reference
	done bool // there are no more elements for this iterator

	dataType arrow.DataType
}

// New{{.Name}}ValueIterator creates a new {{.Name}}ValueIterator for reading an Arrow Column.
func New{{.Name}}ValueIterator(col *arrow.Column) *{{.Name}}ValueIterator {
	// We need a ChunkIterator to read the chunks
	chunkIterator := New{{.Name}}ChunkIterator(col)

	return &{{.Name}}ValueIterator{
		refCount:    1,
		chunkIterator: chunkIterator,

		index:  0,
		values: nil,

		dataType: col.DataType(),
	}
}

// Value will return the current value that the iterator is on and boolean value indicating if the value is actually null.
func (vr *{{.Name}}ValueIterator) Value() ({{.Type}}, bool) {
	return vr.values[vr.index], vr.ref.IsNull(vr.index)
}

// ValuePointer will return a pointer to the current value that the iterator is on. It will return nil if the value is actually null.
func (vr *{{.Name}}ValueIterator) ValuePointer() *{{.Type}} {
	if vr.ref.IsNull(vr.index) {
		return nil
	}
	return &vr.values[vr.index]
}

// ValueInterface returns the current value as an interface{}.
func (vr *{{.Name}}ValueIterator) ValueInterface() interface{} {
	if vr.ref.IsNull(vr.index) {
		return nil
	}
	return vr.values[vr.index]
}

// ValueAsJSON returns the current value as an interface{} in it's JSON representation.
func (vr *{{.Name}}ValueIterator) ValueAsJSON() (interface{}, error) {
	if vr.ref.IsNull(vr.index) {
		return nil, nil
	}
	return {{camel .Name}}AsJSON(vr.values[vr.index])
}

func (vr *{{.Name}}ValueIterator) DataType() arrow.DataType {
	return vr.dataType
}

// Next moves the iterator to the next value. This will return false
// when there are no more values.
func (vr *{{.Name}}ValueIterator) Next() bool {
	if vr.done {
		return false
	}

	// Move the index up
	vr.index++

	// Keep moving the chunk up until we get one with data
	for vr.values == nil || vr.index >= len(vr.values) {
		if !vr.nextChunk() {
			// There were no more chunks with data in them
			vr.done = true
			return false
		}
	}

	return true
}

func (vr *{{.Name}}ValueIterator) nextChunk() bool {
	// Advance the chunk until we get one with data in it or we are done
	if !vr.chunkIterator.Next() {
		// No more chunks
		return false
	}

	// There was another chunk.
	// We maintain the ref and the values because the ref is going to allow us to retain the memory.
	ref := vr.chunkIterator.Chunk()
	ref.Retain()

	if vr.ref != nil {
		vr.ref.Release()
	}

	vr.ref = ref
	vr.values = vr.chunkIterator.ChunkValues()
	vr.index = 0
	return true
}

// Retain keeps a reference to the {{.Name}}ValueIterator.
func (vr *{{.Name}}ValueIterator) Retain() {
	atomic.AddInt64(&vr.refCount, 1)
}

// Release removes a reference to the {{.Name}}ValueIterator.
func (vr *{{.Name}}ValueIterator) Release() {
	refs := atomic.AddInt64(&vr.refCount, -1)
	debug.Assert(refs >= 0, "too many releases")
	if refs == 0 {
		if vr.chunkIterator != nil {
			vr.chunkIterator.Release()
			vr.chunkIterator = nil
		}

		if vr.ref != nil {
			vr.ref.Release()
			vr.ref = nil
		}
		vr.values = nil
	}
}

{{end}}
{{end}}
